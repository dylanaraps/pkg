#!/bin/sh
# shellcheck disable=2086,2154,2123,2034,SC1007 source=/dev/null
#
# mkpkg - package builder for kiss linux.

pkgfile_read() {
    [ -f pkgfile ] || die "pkgfile not found"

    . pkgfile || die "syntax error in pkgfile"

    [ -z "$name" ] &&    die "name not defined in pkgfile"
    [ -z "$version" ] && die "version not defined in pkgfile"
    [ -z "$release" ] && die "release not defined in pkgfile"

    PATH= type build >/dev/null || die "build() not found in pkgfile."
}

pkg_get() {
    mkdir -p build || die "couldn't create build dir"

    for src in $source; do
        if is_remote "$src"; then
            log "downloading $src"
            wget -P build -- "$src" || die "failed to download $src"
        else
            [ -f "$src" ] && continue
            die "source file $src not found"
        fi
    done
}

pkg_verify() {
    pkg_checksum build/.checksum
    diff .checksum build/.checksum ||
        die "checksums of sources do not match checksums of package" \
            "run 'mkpkg checksum' to update checksums"
}

pkg_manifest() {
    cd "$pkgfile_pwd/build/pkg"
    find . -mindepth 1 | sed 's/^\.//' > ../../.manifest
}

pkg_extract() {
    cd build || die "can't access build dir"
    mkdir -p src pkg

    for pkg in $source; do
        pkg_name=${pkg##*/}

        case $pkg in
            *.tar|*.tar.gz|*.tar.xz|*.tar.bz2|*.tar.lzma|\
            *.tar.lz|*.txz|*.tgz|*.tbz2|*.zip|*.rpm|*.7z)
                tar xavf "$pkg_name" -C src --strip-components 1 ||
                    die "couldn't extract $pkg_name"
            ;;

            *)  cp -f "../$pkg_name" src ;;
        esac
    done

    _(){ [ "$1" = "src/*" ] && die "no source files found";}; _ src/*
}

pkg_build() {
    cd src >/dev/null || die "can't access src dir."
    BUILD=$pkgfile_pwd/build/pkg

    set -e
    build || die "failed to build $name-$version"
    set +e

    pkg_manifest

    cd "$pkgfile_pwd"

    cp .manifest "build/pkg/$name-manifest"
    tar cvf "$name-$version-$release.tar.gz" -C build/pkg . >/dev/null ||
        die "failed to create package"

    log "successfuly built $name"
    log "package is at $name-$version-$release.tar.gz"
}

pkg_checksum() {
    for src in $source; do
        if is_remote "$src"; then
            files="$files build/${src##*/}"
        else
            files="$files $src"
        fi
    done

    sha256sum -- $files > "$1" || die "failed to generate checksums"
    log "Saved checksum to $1"
}

is_remote() {
    [ -z "${src##*://*}" ] && return 0
    return 1
}

clean() {
    [ -d "$pkgfile_pwd/build" ] && rm -rf "$pkgfile_pwd/build"
}

die() {
    printf '\e[31m!>\e[m %s\n' "$@" >&2
    exit 1
}

log() {
    printf '\e[32m=>\e[m %s\n' "$1"
}

args() {
    [ -z "$1" ] && return

    [ "$1" = -v ] && printf '%s\n' "mkpkg 0.1.0"
    [ "$1" = -h ] && printf '%s\n' "usage: mkpkg, mkpkg checksum " >&2

    [ "$1" = checksum ] && {
        pkg_get
        pkg_checksum .checksum
    }
    exit
}

main() {
    pkgfile_pwd=$PWD

    trap clean EXIT INT
    clean

    pkgfile_read
    args "$@"

    [ -f .checksum ] || die "checksums not found, run 'mkpkg checksum'"

    pkg_get
    pkg_verify
    pkg_extract >/dev/null
    pkg_build
}

main "$@"
